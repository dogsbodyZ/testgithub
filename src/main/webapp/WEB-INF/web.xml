<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明,注册springmvc核心对象: DispatcherServlet
    需要在Tomcat服务器启动后创建DispatcherServlet对象实例
    为什么要创建对象实例呢?  因为:
                DispatcherServlet在他的创建过程中,会同时创建springmvc容器
           对象,读取springmvc的配置文件,把这个配置文件中的对象都创建好,当
           用户发起请求时就可以直接使用对象了.

       Servlet初始化会执行init()方法  DispatcherServlet在init()中{
            //创建容器,读取配置文件
            webApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml")
            //把容器对象放在ServletContext中
            getServletContext().setAttribute(key,ctx);
       }


       启动Tomcat报错,读取这个文件  /WEB-INF/springmvc-servlet.xml(  /WEB-INF/myweb-servlet.xml)
       springmvc创建容器对象时,读取配置文件默认是:
                            /WEB-INF/<servlet-name>-servlet.xml
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name><!--或者myweb-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springmvc读取的配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--  指定自定义文件的位置,类路径之下          -->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!-- 在Tomcat启动之后 创建Servlet对象
        load-on-startup:表示在Tomcat启动之后创建对象的顺序.他的值是整数 大于等于0
        值越小表示的是Tomcat创建的时间越早
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!--
            使用框架的时候,url-pattern可以使用两种值
            1. 扩展名方式,语法 *.xxxx,xxxx是自定义的扩展名.  常用方式:
                    *.do  ;  *.action  ;  *.mvc 等等
                    例如: http://localhost:8080/myweb/some.do
                    例如: http://localhost:8080/myweb/other.do
                    表示一切以.do结尾的请求都交给springmvc这个中央调度器来处理
            2. 使用斜杠  "/"
    -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>